plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'nu.studer.jooq' version '8.2.1'
}

group = 'com.abarigena'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    runtimeOnly 'org.postgresql:r2dbc-postgresql'

    implementation("org.flywaydb:flyway-core:11.7.1")
    runtimeOnly group: 'org.flywaydb', name: 'flyway-database-postgresql', version: '11.7.1'
    runtimeOnly 'org.postgresql:postgresql'

    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    
    // Spring Security and JWT
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    
    // Redis зависимости для реактивного приложения
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    
    // Jackson support for Java 8 time types
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    
    implementation "org.mapstruct:mapstruct:1.5.5.Final"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    testImplementation "org.testcontainers:junit-jupiter:1.19.7"
    testImplementation "org.testcontainers:postgresql:1.19.7"
    testImplementation "org.testcontainers:r2dbc:1.19.7"
    testImplementation 'org.testcontainers:rabbitmq:1.20.6'
    testImplementation "org.testcontainers:mongodb:1.19.7"
    testImplementation 'org.testcontainers:kafka:1.20.6'
    // For Redis testing, use the generic TestContainers container
    testImplementation "org.testcontainers:testcontainers:1.19.7"

    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    implementation 'org.springframework.kafka:spring-kafka'

    // OpenSearch для поиска и аналитики
    implementation 'org.opensearch.client:opensearch-rest-client:2.10.0'
    implementation 'org.opensearch.client:opensearch-java:2.10.0'
    
    // JOOQ зависимости для Task 15
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.jooq:jooq'
    implementation 'org.jooq:jooq-meta'
    implementation 'org.jooq:jooq-codegen'
    implementation 'com.zaxxer:HikariCP'
    
    // PostgreSQL драйвер для JOOQ кодогенерации
    jooqGenerator 'org.postgresql:postgresql'
}

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
        allowInsecureProtocol = true
    }
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required=true // .enabled=true

        html.required=true // .enabled=true

    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/abarigena/taskflow/TaskFlowApplication.class',
                    'com/abarigena/taskflow/dto/**',    // Исключить все DTO
                    'com/abarigena/taskflow/storeSQL/entity/**', // Исключить Entity
                    'com/abarigena/taskflow/storeNoSQL/entity/**', // Исключить Entity
                    'com/abarigena/taskflow/exception/**', // Исключить исключения
                    'com/abarigena/taskflow/mapper/**' // Исключить сгенерированные мапперы MapStruct
            ])
        }))
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// JOOQ кодогенерация для Task 15
jooq {
    version = dependencyManagement.importedProperties['jooq.version']
    
    configurations {
        main {
            generateSchemaSourceOnCompilation = false
            
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5433/taskflow_db'
                    user = 'postgres'
                    password = 'postgres'
                }
                
                generator {
                    name = 'org.jooq.codegen.JavaGenerator'
                    
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        includes = 'task15_user'
                        excludes = ''
                        
                        forcedTypes {
                            forcedType {
                                userType = 'com.abarigena.taskflow.task15.types.UserRole'
                                includeExpression = '.*\\.ROLE'
                                converter = 'com.abarigena.taskflow.task15.converter.UserRoleConverter'
                            }
                            forcedType {
                                userType = 'com.abarigena.taskflow.task15.types.UserAccountStatus'
                                includeExpression = '.*\\.ACCOUNT_STATUS'
                                converter = 'com.abarigena.taskflow.task15.converter.UserAccountStatusConverter'
                            }
                        }
                    }
                    
                    target {
                        packageName = 'com.abarigena.taskflow.task15.jooq'
                        directory = 'build/generated-src/jooq/main'
                    }
                    
                    generate {
                        pojos = true
                        daos = true
                        records = true
                        interfaces = true
                        fluentSetters = true
                    }
                }
            }
        }
    }
}
