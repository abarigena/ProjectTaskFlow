package com.abarigena.taskflow.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.Map;

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Debezium –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * –°–æ–∑–¥–∞–µ—Ç CDC –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü–∞—Ö
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class DebeziumInitializer implements ApplicationRunner {

    private final ResourceLoader resourceLoader;
    private final ObjectMapper objectMapper;
    private final RestTemplate restTemplate = new RestTemplate();

    @Value("${debezium.connect.url}")
    private String debeziumUrl;

    @Value("${debezium.connect.connector.name}")
    private String connectorName;

    @Value("${debezium.connect.connector.config-file}")
    private String configFile;

    @Override
    public void run(ApplicationArguments args) throws Exception {
        log.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Debezium CDC –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞...");
        
        // –ñ–¥–µ–º –ø–æ–∫–∞ Debezium Connect –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
        waitForDebeziumConnect();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
        if (isConnectorExists()) {
            log.info("‚úÖ Debezium –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä '{}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", connectorName);
            logConnectorStatus();
        } else {
            log.info("üì° –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Debezium –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä '{}'...", connectorName);
            createConnector();
        }
    }

    private void waitForDebeziumConnect() {
        int maxRetries = 30;
        int delay = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
        
        for (int i = 0; i < maxRetries; i++) {
            try {
                restTemplate.getForEntity(debeziumUrl + "/connectors", String.class);
                log.info("‚úÖ Debezium Connect –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
                return;
            } catch (Exception e) {
                log.warn("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ Debezium Connect... –ø–æ–ø—ã—Ç–∫–∞ {}/{}", i + 1, maxRetries);
                try {
                    Thread.sleep(delay);
                } catch (InterruptedException ie) {
                    Thread.currentThread().interrupt();
                    throw new RuntimeException("–ü—Ä–µ—Ä–≤–∞–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ Debezium Connect", ie);
                }
            }
        }
        throw new RuntimeException("Debezium Connect –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ " + maxRetries + " –ø–æ–ø—ã—Ç–æ–∫");
    }

    private boolean isConnectorExists() {
        try {
            ResponseEntity<List> response = restTemplate.getForEntity(
                debeziumUrl + "/connectors", List.class);
            List<String> connectors = response.getBody();
            return connectors != null && connectors.contains(connectorName);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞: {}", e.getMessage());
            return false;
        }
    }

    private void createConnector() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
            Resource resource = resourceLoader.getResource(configFile);
            Map<String, Object> config = objectMapper.readValue(
                resource.getInputStream(), Map.class);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            
            HttpEntity<Map<String, Object>> request = new HttpEntity<>(config, headers);
            
            ResponseEntity<Map> response = restTemplate.postForEntity(
                debeziumUrl + "/connectors", request, Map.class);

            if (response.getStatusCode().is2xxSuccessful()) {
                log.info("‚úÖ Debezium –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä '{}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", connectorName);
                
                // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                Thread.sleep(3000);
                logConnectorStatus();
            } else {
                log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞. HTTP —Å—Ç–∞—Ç—É—Å: {}", response.getStatusCode());
            }
            
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Debezium –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞: {}", e.getMessage(), e);
        }
    }

    private void logConnectorStatus() {
        try {
            ResponseEntity<Map> response = restTemplate.getForEntity(
                debeziumUrl + "/connectors/" + connectorName + "/status", Map.class);
            
            Map<String, Object> status = response.getBody();
            if (status != null) {
                log.info("üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ '{}': {}", connectorName, 
                    status.get("connector"));
                
                List<Map<String, Object>> tasks = (List<Map<String, Object>>) status.get("tasks");
                if (tasks != null && !tasks.isEmpty()) {
                    for (int i = 0; i < tasks.size(); i++) {
                        log.info("   üìã Task {}: {}", i, tasks.get(i).get("state"));
                    }
                }
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞: {}", e.getMessage());
        }
    }
} 