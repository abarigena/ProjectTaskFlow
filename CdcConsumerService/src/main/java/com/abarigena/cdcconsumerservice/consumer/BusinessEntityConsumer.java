package com.abarigena.cdcconsumerservice.consumer;

import com.abarigena.cdcconsumerservice.dto.DebeziumEvent;
import com.abarigena.cdcconsumerservice.service.OpenSearchSyncService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.stereotype.Component;

import java.util.Map;

/**
 * Consumer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CDC —Å–æ–±—ã—Ç–∏–π –æ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-—Ç–∞–±–ª–∏—Ü
 * –ó–∞–º–µ–Ω—è–µ—Ç OutboxEventConsumer –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class BusinessEntityConsumer {

    private final ObjectMapper objectMapper;
    private final OpenSearchSyncService openSearchSyncService;

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CDC —Å–æ–±—ã—Ç–∏—è –æ—Ç —Ç–∞–±–ª–∏—Ü—ã tasks
     */
    @KafkaListener(
        topics = "tasks",
        groupId = "cdc-business-group"
    )
    public void handleTaskEvent(@Payload String message) {
        log.info("üéØ –ü–æ–ª—É—á–µ–Ω–æ CDC —Å–æ–±—ã—Ç–∏–µ –æ—Ç —Ç–∞–±–ª–∏—Ü—ã tasks: {}", message);
        handleEntityEvent("tasks", message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CDC —Å–æ–±—ã—Ç–∏—è –æ—Ç —Ç–∞–±–ª–∏—Ü—ã comments
     */
    @KafkaListener(
        topics = "comments",
        groupId = "cdc-business-group"
    )
    public void handleCommentEvent(@Payload String message) {
        log.info("üí¨ –ü–æ–ª—É—á–µ–Ω–æ CDC —Å–æ–±—ã—Ç–∏–µ –æ—Ç —Ç–∞–±–ª–∏—Ü—ã comments: {}", message);
        handleEntityEvent("comments", message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CDC —Å–æ–±—ã—Ç–∏—è –æ—Ç —Ç–∞–±–ª–∏—Ü—ã projects
     */
    @KafkaListener(
        topics = "projects",
        groupId = "cdc-business-group"
    )
    public void handleProjectEvent(@Payload String message) {
        log.info("üìÅ –ü–æ–ª—É—á–µ–Ω–æ CDC —Å–æ–±—ã—Ç–∏–µ –æ—Ç —Ç–∞–±–ª–∏—Ü—ã projects: {}", message);
        handleEntityEvent("projects", message);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CDC —Å–æ–±—ã—Ç–∏—è –æ—Ç —Ç–∞–±–ª–∏—Ü—ã users
     */
    @KafkaListener(
        topics = "users",
        groupId = "cdc-business-group"
    )
    public void handleUserEvent(@Payload String message) {
        log.info("üë§ –ü–æ–ª—É—á–µ–Ω–æ CDC —Å–æ–±—ã—Ç–∏–µ –æ—Ç —Ç–∞–±–ª–∏—Ü—ã users: {}", message);
        handleEntityEvent("users", message);
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CDC —Å–æ–±—ã—Ç–∏–π
     */
    private void handleEntityEvent(String entityType, String message) {
        try {
            // –ü–∞—Ä—Å–∏–º Debezium —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ Map –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏
            TypeReference<DebeziumEvent<Map<String, Object>>> typeRef = 
                new TypeReference<DebeziumEvent<Map<String, Object>>>() {};
            DebeziumEvent<Map<String, Object>> debeziumEvent = 
                objectMapper.readValue(message, typeRef);
            
            String operation = debeziumEvent.getOperation();
            log.info("üìã –û–ø–µ—Ä–∞—Ü–∏—è: {} –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏: {}", operation, entityType);
            
            switch (operation) {
                case "c": // CREATE
                case "u": // UPDATE
                case "r": // READ (Initial snapshot)
                    if (debeziumEvent.getAfter() != null) {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                        openSearchSyncService.indexEntityTyped(entityType, debeziumEvent.getAfter());
                        String operationName = switch (operation) {
                            case "c" -> "—Å–æ–∑–¥–∞–Ω–∞";
                            case "u" -> "–æ–±–Ω–æ–≤–ª–µ–Ω–∞";
                            case "r" -> "–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ snapshot";
                            default -> "–æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞";
                        };
                        log.info("‚úÖ –°—É—â–Ω–æ—Å—Ç—å {} {} –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ OpenSearch", entityType, operationName);
                    }
                    break;
                case "d": // DELETE
                    if (debeziumEvent.getBefore() != null) {
                        Map<String, Object> beforeData = debeziumEvent.getBefore();
                        Object id = beforeData.get("id");
                        if (id != null) {
                            openSearchSyncService.deleteEntity(entityType, String.valueOf(id));
                            log.info("üóëÔ∏è –°—É—â–Ω–æ—Å—Ç—å {} —Å ID {} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ OpenSearch", entityType, id);
                        }
                    }
                    break;
                default:
                    log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è CDC: {}", operation);
            }
            
        } catch (JsonProcessingException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CDC —Å–æ–±—ã—Ç–∏—è –¥–ª—è {}: {}", entityType, e.getMessage(), e);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CDC —Å–æ–±—ã—Ç–∏—è –¥–ª—è {}: {}", entityType, e.getMessage(), e);
        }
    }
} 