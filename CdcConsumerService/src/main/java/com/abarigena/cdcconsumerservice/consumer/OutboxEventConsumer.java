package com.abarigena.cdcconsumerservice.consumer;

import com.abarigena.cdcconsumerservice.dto.DebeziumEvent;
import com.abarigena.cdcconsumerservice.dto.OutboxEventData;
import com.abarigena.cdcconsumerservice.service.OpenSearchSyncService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.stereotype.Component;

@Slf4j
@Component
@RequiredArgsConstructor
public class OutboxEventConsumer {

    private final ObjectMapper objectMapper;
    private final OpenSearchSyncService openSearchSyncService;

    /**
     * –°–ª—É—à–∞–µ–º CDC —Å–æ–±—ã—Ç–∏—è –∏–∑ outbox —Ç–∞–±–ª–∏—Ü—ã.
     * –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω Outbox - –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã-–ø–æ—Å—Ä–µ–¥–Ω–∏–∫–∞.
     */
    @KafkaListener(
        topics = "taskflow.public.outbox_events",
        groupId = "cdc-consumer-group"
    )
    public void handleOutboxEvent(@Payload String message) {
        log.info("üî• –ü–æ–ª—É—á–µ–Ω–æ CDC —Å–æ–±—ã—Ç–∏–µ –∏–∑ outbox: {}", message);
        
        try {
            // –ü–∞—Ä—Å–∏–º Debezium —Å–æ–±—ã—Ç–∏–µ
            DebeziumEvent<OutboxEventData> debeziumEvent = 
                objectMapper.readValue(message, objectMapper.getTypeFactory()
                    .constructParametricType(DebeziumEvent.class, OutboxEventData.class));
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è (INSERT) –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (UPDATE)
            if ("c".equals(debeziumEvent.getOperation()) || "u".equals(debeziumEvent.getOperation())) {
                OutboxEventData eventData = debeziumEvent.getAfter();
                
                if (eventData != null) {
                    processBusinessEvent(eventData);
                    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å OpenSearch
                    syncToOpenSearch(eventData);
                }
            } else if ("d".equals(debeziumEvent.getOperation())) {
                log.info("üóëÔ∏è –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è outbox –∑–∞–ø–∏—Å–∏: {}", debeziumEvent.getBefore());
            }
            
        } catch (JsonProcessingException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CDC —Å–æ–±—ã—Ç–∏—è: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ç–∏–ø–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ outbox
     */
    private void processBusinessEvent(OutboxEventData eventData) {
        log.info("üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏–µ:");
        log.info("   üÜî ID: {}", eventData.getId());
        log.info("   üìù –¢–∏–ø: {}", eventData.getEventType());
        log.info("   üìÑ –î–∞–Ω–Ω—ã–µ: {}", eventData.getEventData());
        log.info("   üïí –°–æ–∑–¥–∞–Ω–æ: {}", eventData.getCreatedAt());
        
        // –ó–¥–µ—Å—å –º—ã –º–æ–∂–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø–∞–º
        switch (eventData.getEventType()) {
            case "USER_CREATED":
                handleUserCreated(eventData.getEventData());
                break;
            case "USER_UPDATED":
                handleUserUpdated(eventData.getEventData());
                break;
            case "USER_PROFILE_VIEWED":
                handleUserProfileViewed(eventData.getEventData());
                break;
            case "USER_LOGIN":
                handleUserLogin(eventData.getEventData());
                break;
            case "ORDER_CREATED":
                handleOrderCreated(eventData.getEventData());
                break;
            case "NOTIFICATION_SENT":
                handleNotificationSent(eventData.getEventData());
                break;
            default:
                log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {}", eventData.getEventType());
        }
    }

    private void handleUserCreated(String eventData) {
        log.info("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", eventData);
        // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ OpenSearch –¥–ª—è –ø–æ–∏—Å–∫–∞
        openSearchSyncService.indexUser(eventData);
    }

    private void handleUserUpdated(String eventData) {
        log.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", eventData);
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ OpenSearch
        try {
            JsonNode userNode = objectMapper.readTree(eventData);
            if (userNode.has("userId")) {
                openSearchSyncService.indexUser(eventData);
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ OpenSearch: {}", e.getMessage());
        }
    }

    private void handleUserProfileViewed(String eventData) {
        log.info("üëÅÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è: {}", eventData);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –≤ OpenSearch
    }

    private void handleUserLogin(String eventData) {
        log.info("üîê –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", eventData);
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ö–æ–¥–æ–≤, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    }

    private void handleOrderCreated(String eventData) {
        log.info("üõí –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {}", eventData);
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤, –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ç.–¥.
    }

    private void handleNotificationSent(String eventData) {
        log.info("üìß –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {}", eventData);
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å OpenSearch –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    private void syncToOpenSearch(OutboxEventData eventData) {
        try {
            JsonNode dataNode = objectMapper.readTree(eventData.getEventData());
            Long userId = dataNode.has("userId") ? dataNode.get("userId").asLong() : null;
            
            if (userId != null) {
                openSearchSyncService.syncUserEvent(userId, eventData.getEventType(), eventData.getEventData());
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è —Å OpenSearch: {}", e.getMessage());
        }
    }
} 