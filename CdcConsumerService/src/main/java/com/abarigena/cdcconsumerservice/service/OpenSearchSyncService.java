package com.abarigena.cdcconsumerservice.service;

import com.abarigena.cdcconsumerservice.dto.CommentIndex;
import com.abarigena.cdcconsumerservice.dto.ProjectIndex;
import com.abarigena.cdcconsumerservice.dto.TaskIndex;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.opensearch.client.opensearch.OpenSearchClient;
import org.opensearch.client.opensearch.core.DeleteRequest;
import org.opensearch.client.opensearch.core.IndexRequest;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class OpenSearchSyncService {

    private final OpenSearchClient openSearchClient;
    private final ObjectMapper objectMapper;

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-—Å—É—â–Ω–æ—Å—Ç–µ–π
     */
    public void indexEntity(String entityType, Map<String, Object> entityData) {
        try {
            String indexName = getIndexName(entityType);
            Object id = entityData.get("id");
            
            if (id == null) {
                log.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞: {}", entityType);
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            Map<String, Object> document = new HashMap<>(entityData);
            document.put("indexedAt", LocalDateTime.now().toString());
            document.put("@timestamp", LocalDateTime.now().toString());
            
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏
            final Map<String, Object> finalDocument = normalizeEntityData(entityType, document);
            
            IndexRequest<Map<String, Object>> request = IndexRequest.of(i -> i
                .index(indexName)
                .id(String.valueOf(id))
                .document(finalDocument)
            );
            
            openSearchClient.index(request);
            
            log.info("‚úÖ –°—É—â–Ω–æ—Å—Ç—å {} —Å ID {} –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ OpenSearch (–∏–Ω–¥–µ–∫—Å: {})", 
                entityType, id, indexName);
                
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ {}: {}", entityType, e.getMessage(), e);
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –∏–∑ OpenSearch
     */
    public void deleteEntity(String entityType, String entityId) {
        try {
            String indexName = getIndexName(entityType);
            
            DeleteRequest request = DeleteRequest.of(d -> d
                .index(indexName)
                .id(entityId)
            );
            
            openSearchClient.delete(request);
            
            log.info("üóëÔ∏è –°—É—â–Ω–æ—Å—Ç—å {} —Å ID {} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ OpenSearch (–∏–Ω–¥–µ–∫—Å: {})", 
                entityType, entityId, indexName);
                
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ {} —Å ID {}: {}", entityType, entityId, e.getMessage(), e);
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–º—è –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏
     */
    private String getIndexName(String entityType) {
        return switch (entityType.toLowerCase()) {
            case "tasks" -> "tasks";
            case "comments" -> "comments";
            case "projects" -> "projects";
            case "users" -> "users";
            default -> entityType.toLowerCase();
        };
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ OpenSearch
     */
    private Map<String, Object> normalizeEntityData(String entityType, Map<String, Object> data) {
        Map<String, Object> normalized = new HashMap<>(data);
        
        switch (entityType.toLowerCase()) {
            case "tasks":
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º enum'—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
                if (normalized.get("status") != null) {
                    normalized.put("status", String.valueOf(normalized.get("status")));
                }
                if (normalized.get("priority") != null) {
                    normalized.put("priority", String.valueOf(normalized.get("priority")));
                }
                break;
            case "comments":
                // –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º context –≤ content –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω–¥–µ–∫—Å—É
                if (normalized.get("context") != null) {
                    normalized.put("content", normalized.get("context"));
                    normalized.remove("context");
                }
                break;
            case "projects":
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É
                if (normalized.get("status") != null) {
                    normalized.put("status", String.valueOf(normalized.get("status")));
                }
                break;
            case "users":
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
                String firstName = (String) normalized.get("first_name");
                String lastName = (String) normalized.get("last_name");
                if (firstName != null && lastName != null) {
                    normalized.put("fullName", firstName + " " + lastName);
                }
                break;
        }
        
        return normalized;
    }

    // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ deprecated
    @Deprecated
    public void syncUserEvent(Long userId, String eventType, String eventData) {
        log.warn("‚ö†Ô∏è –ú–µ—Ç–æ–¥ syncUserEvent —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ indexEntity –¥–ª—è users");
        try {
            Map<String, Object> userData = new HashMap<>();
            userData.put("id", userId);
            userData.put("eventType", eventType);
            userData.put("eventData", eventData);
            indexEntity("user-events", userData);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ deprecated –º–µ—Ç–æ–¥–µ syncUserEvent: {}", e.getMessage(), e);
        }
    }

    @Deprecated
    public void indexUser(String userData) {
        log.warn("‚ö†Ô∏è –ú–µ—Ç–æ–¥ indexUser —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ indexEntity –¥–ª—è users");
        try {
            JsonNode userNode = objectMapper.readTree(userData);
            Map<String, Object> userMap = objectMapper.convertValue(userNode, Map.class);
            indexEntity("users", userMap);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –≤ deprecated –º–µ—Ç–æ–¥–µ indexUser: {}", e.getMessage(), e);
        }
    }
}