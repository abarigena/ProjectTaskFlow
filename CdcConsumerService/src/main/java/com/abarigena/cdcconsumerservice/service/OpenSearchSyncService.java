package com.abarigena.cdcconsumerservice.service;

import com.abarigena.cdcconsumerservice.dto.CommentIndex;
import com.abarigena.cdcconsumerservice.dto.ProjectIndex;
import com.abarigena.cdcconsumerservice.dto.TaskIndex;
import com.abarigena.cdcconsumerservice.dto.UserIndex;
import com.abarigena.cdcconsumerservice.mapper.IndexMapper;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.opensearch.client.opensearch.OpenSearchClient;
import org.opensearch.client.opensearch.core.DeleteRequest;
import org.opensearch.client.opensearch.core.IndexRequest;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å OpenSearch
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ DTO (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
 * - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Map (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 * - –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * 
 * 1. –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥):
 * <pre>
 * {@code
 * UserIndex user = UserIndex.builder()
 *     .id(1L)
 *     .firstName("–ò–≤–∞–Ω")
 *     .lastName("–ü–µ—Ç—Ä–æ–≤")
 *     .email("ivan@example.com")
 *     .active(true)
 *     .build();
 * 
 * openSearchSyncService.indexUser(user);
 * }
 * </pre>
 * 
 * 2. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ CDC —Å–æ–±—ã—Ç–∏—è:
 * <pre>
 * {@code
 * Map<String, Object> userData = debeziumEvent.getAfter();
 * openSearchSyncService.indexEntityTyped("users", userData);
 * }
 * </pre>
 * 
 * 3. –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏:
 * <pre>
 * {@code
 * openSearchSyncService.deleteEntity("users", "1");
 * }
 * </pre>
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class OpenSearchSyncService {

    private final OpenSearchClient openSearchClient;
    private final ObjectMapper objectMapper;
    private final IndexMapper indexMapper;

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-—Å—É—â–Ω–æ—Å—Ç–µ–π
     */
    public void indexEntity(String entityType, Map<String, Object> entityData) {
        try {
            String indexName = getIndexName(entityType);
            Object id = entityData.get("id");
            
            if (id == null) {
                log.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞: {}", entityType);
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            Map<String, Object> document = new HashMap<>(entityData);
            document.put("indexedAt", LocalDateTime.now().toString());
            document.put("@timestamp", LocalDateTime.now().toString());
            
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏
            final Map<String, Object> finalDocument = normalizeEntityData(entityType, document);
            
            IndexRequest<Map<String, Object>> request = IndexRequest.of(i -> i
                .index(indexName)
                .id(String.valueOf(id))
                .document(finalDocument)
            );
            
            openSearchClient.index(request);
            
            log.info("‚úÖ –°—É—â–Ω–æ—Å—Ç—å {} —Å ID {} –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ OpenSearch (–∏–Ω–¥–µ–∫—Å: {})", 
                entityType, id, indexName);
                
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ {}: {}", entityType, e.getMessage(), e);
        }
    }

    /**
     * –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö DTO
     */
    public void indexEntityTyped(String entityType, Map<String, Object> entityData) {
        try {
            switch (entityType.toLowerCase()) {
                case "users":
                    UserIndex userIndex = indexMapper.mapToUserIndex(entityData);
                    indexUser(userIndex);
                    break;
                case "tasks":
                    TaskIndex taskIndex = indexMapper.mapToTaskIndex(entityData);
                    indexTask(taskIndex);
                    break;
                case "projects":
                    ProjectIndex projectIndex = indexMapper.mapToProjectIndex(entityData);
                    indexProject(projectIndex);
                    break;
                case "comments":
                    CommentIndex commentIndex = indexMapper.mapToCommentIndex(entityData);
                    indexComment(commentIndex);
                    break;
                default:
                    log.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏: {}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥", entityType);
                    indexEntity(entityType, entityData);
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ {}: {}", entityType, e.getMessage(), e);
            // Fallback –∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º—É –º–µ—Ç–æ–¥—É
            log.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥...");
            indexEntity(entityType, entityData);
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –∏–∑ OpenSearch
     */
    public void deleteEntity(String entityType, String entityId) {
        try {
            String indexName = getIndexName(entityType);
            
            DeleteRequest request = DeleteRequest.of(d -> d
                .index(indexName)
                .id(entityId)
            );
            
            openSearchClient.delete(request);
            
            log.info("üóëÔ∏è –°—É—â–Ω–æ—Å—Ç—å {} —Å ID {} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ OpenSearch (–∏–Ω–¥–µ–∫—Å: {})", 
                entityType, entityId, indexName);
                
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ {} —Å ID {}: {}", entityType, entityId, e.getMessage(), e);
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–º—è –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏
     */
    private String getIndexName(String entityType) {
        return switch (entityType.toLowerCase()) {
            case "tasks" -> "tasks";
            case "comments" -> "comments";
            case "projects" -> "projects";
            case "users" -> "users";
            default -> entityType.toLowerCase();
        };
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ OpenSearch
     */
    private Map<String, Object> normalizeEntityData(String entityType, Map<String, Object> data) {
        Map<String, Object> normalized = new HashMap<>(data);
        
        switch (entityType.toLowerCase()) {
            case "tasks":
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º enum'—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
                if (normalized.get("status") != null) {
                    normalized.put("status", String.valueOf(normalized.get("status")));
                }
                if (normalized.get("priority") != null) {
                    normalized.put("priority", String.valueOf(normalized.get("priority")));
                }
                break;
            case "comments":
                // –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º context –≤ content –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω–¥–µ–∫—Å—É
                if (normalized.get("context") != null) {
                    normalized.put("content", normalized.get("context"));
                    normalized.remove("context");
                }
                break;
            case "projects":
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É
                if (normalized.get("status") != null) {
                    normalized.put("status", String.valueOf(normalized.get("status")));
                }
                break;
            case "users":
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
                String firstName = (String) normalized.get("first_name");
                String lastName = (String) normalized.get("last_name");
                if (firstName != null && lastName != null) {
                    normalized.put("fullName", firstName + " " + lastName);
                }
                break;
        }
        
        return normalized;
    }

    /**
     * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public void indexUser(UserIndex userIndex) {
        try {
            // –í—ã—á–∏—Å–ª—è–µ–º fullName –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–¥–∞–Ω
            if (userIndex.getFullName() == null && 
                userIndex.getFirstName() != null && 
                userIndex.getLastName() != null) {
                userIndex.setFullName(userIndex.getFirstName() + " " + userIndex.getLastName());
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
            userIndex.setIndexedAt(LocalDateTime.now());
            
            IndexRequest<UserIndex> request = IndexRequest.of(i -> i
                .index(userIndex.getIndexName())
                .id(String.valueOf(userIndex.getId()))
                .document(userIndex)
            );
            
            openSearchClient.index(request);
            
            log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} (ID: {}) –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ OpenSearch", 
                userIndex.getFullName(), userIndex.getId());
                
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {}: {}", 
                userIndex.getId(), e.getMessage(), e);
        }
    }

    /**
     * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
     */
    public void indexTask(TaskIndex taskIndex) {
        try {
            taskIndex.setIndexedAt(LocalDateTime.now());
            
            IndexRequest<TaskIndex> request = IndexRequest.of(i -> i
                .index(taskIndex.getIndexName())
                .id(String.valueOf(taskIndex.getId()))
                .document(taskIndex)
            );
            
            openSearchClient.index(request);
            
            log.info("‚úÖ –ó–∞–¥–∞—á–∞ '{}' (ID: {}) –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ OpenSearch", 
                taskIndex.getTitle(), taskIndex.getId());
                
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å ID {}: {}", 
                taskIndex.getId(), e.getMessage(), e);
        }
    }

    /**
     * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
     */
    public void indexProject(ProjectIndex projectIndex) {
        try {
            projectIndex.setIndexedAt(LocalDateTime.now());
            
            IndexRequest<ProjectIndex> request = IndexRequest.of(i -> i
                .index(projectIndex.getIndexName())
                .id(String.valueOf(projectIndex.getId()))
                .document(projectIndex)
            );
            
            openSearchClient.index(request);
            
            log.info("‚úÖ –ü—Ä–æ–µ–∫—Ç '{}' (ID: {}) –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ OpenSearch", 
                projectIndex.getName(), projectIndex.getId());
                
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å ID {}: {}", 
                projectIndex.getId(), e.getMessage(), e);
        }
    }

    /**
     * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
     */
    public void indexComment(CommentIndex commentIndex) {
        try {
            commentIndex.setIndexedAt(LocalDateTime.now());
            
            IndexRequest<CommentIndex> request = IndexRequest.of(i -> i
                .index(commentIndex.getIndexName())
                .id(String.valueOf(commentIndex.getId()))
                .document(commentIndex)
            );
            
            openSearchClient.index(request);
            
            log.info("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: {}) –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ OpenSearch", 
                commentIndex.getId());
                
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å ID {}: {}", 
                commentIndex.getId(), e.getMessage(), e);
        }
    }

}